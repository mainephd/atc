// This file was generated by counterfeiter
package teamserverfakes

import (
	"sync"

	"github.com/concourse/atc/api/teamserver"
	"github.com/concourse/atc/db"
)

type FakeTeamsDB struct {
	GetTeamsStub        func() ([]db.SavedTeam, error)
	getTeamsMutex       sync.RWMutex
	getTeamsArgsForCall []struct{}
	getTeamsReturns     struct {
		result1 []db.SavedTeam
		result2 error
	}
	getTeamsReturnsOnCall map[int]struct {
		result1 []db.SavedTeam
		result2 error
	}
	DeleteTeamByNameStub        func(teamName string) error
	deleteTeamByNameMutex       sync.RWMutex
	deleteTeamByNameArgsForCall []struct {
		teamName string
	}
	deleteTeamByNameReturns struct {
		result1 error
	}
	deleteTeamByNameReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTeamsDB) GetTeams() ([]db.SavedTeam, error) {
	fake.getTeamsMutex.Lock()
	ret, specificReturn := fake.getTeamsReturnsOnCall[len(fake.getTeamsArgsForCall)]
	fake.getTeamsArgsForCall = append(fake.getTeamsArgsForCall, struct{}{})
	fake.recordInvocation("GetTeams", []interface{}{})
	fake.getTeamsMutex.Unlock()
	if fake.GetTeamsStub != nil {
		return fake.GetTeamsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getTeamsReturns.result1, fake.getTeamsReturns.result2
}

func (fake *FakeTeamsDB) GetTeamsCallCount() int {
	fake.getTeamsMutex.RLock()
	defer fake.getTeamsMutex.RUnlock()
	return len(fake.getTeamsArgsForCall)
}

func (fake *FakeTeamsDB) GetTeamsReturns(result1 []db.SavedTeam, result2 error) {
	fake.GetTeamsStub = nil
	fake.getTeamsReturns = struct {
		result1 []db.SavedTeam
		result2 error
	}{result1, result2}
}

func (fake *FakeTeamsDB) GetTeamsReturnsOnCall(i int, result1 []db.SavedTeam, result2 error) {
	fake.GetTeamsStub = nil
	if fake.getTeamsReturnsOnCall == nil {
		fake.getTeamsReturnsOnCall = make(map[int]struct {
			result1 []db.SavedTeam
			result2 error
		})
	}
	fake.getTeamsReturnsOnCall[i] = struct {
		result1 []db.SavedTeam
		result2 error
	}{result1, result2}
}

func (fake *FakeTeamsDB) DeleteTeamByName(teamName string) error {
	fake.deleteTeamByNameMutex.Lock()
	ret, specificReturn := fake.deleteTeamByNameReturnsOnCall[len(fake.deleteTeamByNameArgsForCall)]
	fake.deleteTeamByNameArgsForCall = append(fake.deleteTeamByNameArgsForCall, struct {
		teamName string
	}{teamName})
	fake.recordInvocation("DeleteTeamByName", []interface{}{teamName})
	fake.deleteTeamByNameMutex.Unlock()
	if fake.DeleteTeamByNameStub != nil {
		return fake.DeleteTeamByNameStub(teamName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteTeamByNameReturns.result1
}

func (fake *FakeTeamsDB) DeleteTeamByNameCallCount() int {
	fake.deleteTeamByNameMutex.RLock()
	defer fake.deleteTeamByNameMutex.RUnlock()
	return len(fake.deleteTeamByNameArgsForCall)
}

func (fake *FakeTeamsDB) DeleteTeamByNameArgsForCall(i int) string {
	fake.deleteTeamByNameMutex.RLock()
	defer fake.deleteTeamByNameMutex.RUnlock()
	return fake.deleteTeamByNameArgsForCall[i].teamName
}

func (fake *FakeTeamsDB) DeleteTeamByNameReturns(result1 error) {
	fake.DeleteTeamByNameStub = nil
	fake.deleteTeamByNameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTeamsDB) DeleteTeamByNameReturnsOnCall(i int, result1 error) {
	fake.DeleteTeamByNameStub = nil
	if fake.deleteTeamByNameReturnsOnCall == nil {
		fake.deleteTeamByNameReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteTeamByNameReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTeamsDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getTeamsMutex.RLock()
	defer fake.getTeamsMutex.RUnlock()
	fake.deleteTeamByNameMutex.RLock()
	defer fake.deleteTeamByNameMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeTeamsDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ teamserver.TeamsDB = new(FakeTeamsDB)
